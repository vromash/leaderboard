// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package leaderboard

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaderboardServiceClient is the client API for LeaderboardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderboardServiceClient interface {
	ListScore(ctx context.Context, in *ListScoreRequest, opts ...grpc.CallOption) (*ListScoreResponse, error)
	SaveScore(ctx context.Context, opts ...grpc.CallOption) (LeaderboardService_SaveScoreClient, error)
}

type leaderboardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderboardServiceClient(cc grpc.ClientConnInterface) LeaderboardServiceClient {
	return &leaderboardServiceClient{cc}
}

func (c *leaderboardServiceClient) ListScore(ctx context.Context, in *ListScoreRequest, opts ...grpc.CallOption) (*ListScoreResponse, error) {
	out := new(ListScoreResponse)
	err := c.cc.Invoke(ctx, "/leaderboard.LeaderboardService/ListScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaderboardServiceClient) SaveScore(ctx context.Context, opts ...grpc.CallOption) (LeaderboardService_SaveScoreClient, error) {
	stream, err := c.cc.NewStream(ctx, &LeaderboardService_ServiceDesc.Streams[0], "/leaderboard.LeaderboardService/SaveScore", opts...)
	if err != nil {
		return nil, err
	}
	x := &leaderboardServiceSaveScoreClient{stream}
	return x, nil
}

type LeaderboardService_SaveScoreClient interface {
	Send(*SaveScoreRequest) error
	Recv() (*SaveScoreResponse, error)
	grpc.ClientStream
}

type leaderboardServiceSaveScoreClient struct {
	grpc.ClientStream
}

func (x *leaderboardServiceSaveScoreClient) Send(m *SaveScoreRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leaderboardServiceSaveScoreClient) Recv() (*SaveScoreResponse, error) {
	m := new(SaveScoreResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeaderboardServiceServer is the server API for LeaderboardService service.
// All implementations must embed UnimplementedLeaderboardServiceServer
// for forward compatibility
type LeaderboardServiceServer interface {
	ListScore(context.Context, *ListScoreRequest) (*ListScoreResponse, error)
	SaveScore(LeaderboardService_SaveScoreServer) error
	mustEmbedUnimplementedLeaderboardServiceServer()
}

// UnimplementedLeaderboardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaderboardServiceServer struct {
}

func (UnimplementedLeaderboardServiceServer) ListScore(context.Context, *ListScoreRequest) (*ListScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListScore not implemented")
}
func (UnimplementedLeaderboardServiceServer) SaveScore(LeaderboardService_SaveScoreServer) error {
	return status.Errorf(codes.Unimplemented, "method SaveScore not implemented")
}
func (UnimplementedLeaderboardServiceServer) mustEmbedUnimplementedLeaderboardServiceServer() {}

// UnsafeLeaderboardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderboardServiceServer will
// result in compilation errors.
type UnsafeLeaderboardServiceServer interface {
	mustEmbedUnimplementedLeaderboardServiceServer()
}

func RegisterLeaderboardServiceServer(s grpc.ServiceRegistrar, srv LeaderboardServiceServer) {
	s.RegisterService(&LeaderboardService_ServiceDesc, srv)
}

func _LeaderboardService_ListScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderboardServiceServer).ListScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/leaderboard.LeaderboardService/ListScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderboardServiceServer).ListScore(ctx, req.(*ListScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaderboardService_SaveScore_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeaderboardServiceServer).SaveScore(&leaderboardServiceSaveScoreServer{stream})
}

type LeaderboardService_SaveScoreServer interface {
	Send(*SaveScoreResponse) error
	Recv() (*SaveScoreRequest, error)
	grpc.ServerStream
}

type leaderboardServiceSaveScoreServer struct {
	grpc.ServerStream
}

func (x *leaderboardServiceSaveScoreServer) Send(m *SaveScoreResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leaderboardServiceSaveScoreServer) Recv() (*SaveScoreRequest, error) {
	m := new(SaveScoreRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeaderboardService_ServiceDesc is the grpc.ServiceDesc for LeaderboardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderboardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leaderboard.LeaderboardService",
	HandlerType: (*LeaderboardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListScore",
			Handler:    _LeaderboardService_ListScore_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SaveScore",
			Handler:       _LeaderboardService_SaveScore_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/controller/protos/leaderboard.proto",
}
